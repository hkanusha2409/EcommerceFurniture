package com.cart.serviceimpl;

import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.cart.client.CustomerService;
import com.cart.client.ProductService;
import com.cart.dto.CartDTO;
import com.cart.entity.Cart;
import com.cart.exception.AddToCartNotFoundException;
import com.cart.repository.CartRepository;
import com.cart.service.CartService;
import com.ecommerce.dto.CustomerDTO;
import com.ecommerce.exception.CustomerNotFoundException;
import com.google.common.base.Optional;
import com.product.dto.ProductDTO;
import com.product.entity.Product;

@Service
public class CartServiceImpl implements CartService {
	
	@Autowired
	private CustomerService customerService;

	@Autowired
	private ProductService productService;

	@Autowired
	private CartRepository cartRepository;

	public CartDTO addToCart(int customerId, int productId) throws AddToCartNotFoundException{
		
		
		CustomerDTO customer = customerService.getCustomerById(customerId);
		
		if(customer==null) {
			throw new AddToCartNotFoundException("Customer Not Found by the Id");
		}
		
		ProductDTO product = productService.getProductById(productId);
		
		if(customer==null) {
			throw new ProductNotFoundException("Customer Not Found by the Id");
		}
		
		
		
			
		Cart cart = cartRepository.findByCustomerId(customerId).get();
		List<Integer> products =cart.getProductIds();
		
			if(cart!=null) {
				
					
				products.add(productId);	
				cart.setProductIds(products);
				cart.setTotalPrice(product.getProductPrice()+cart.getTotalPrice());
				
				cart.setTotalQuantity(cart.getTotalQuantity() +1);
				cartRepository.save(cart);
			}
			else {
				
				
				products.add(productId);
				
				cart.setCustomerId(customerId);
				cart.setProductIds(products);
				cart.setTotalPrice(product.getProductPrice()+cart.getTotalPrice());
				cart.setTotalQuantity(1);
				cartRepository.save(cart);
			}
			
			CartDTO cartDTO = new CartDTO();
			
			cartDTO.setId(cart.getId());
			cartDTO.setCustomerId(cart.getCustomerId());
			cartDTO.setProductIds(cart.getProductIds());
			cartDTO.setTotalPrice(cart.getTotalPrice());
			cartDTO.setTotalQuantity(cart.getTotalQuantity());
			return cartDTO;
		
		
		
		
		

	}

	

	public String deleteProduct(int custid, int prodid) {

		CustomerEntity customer;
		try {
			customer = customerRepository.findById(custid).orElseThrow(() -> new CustomerNotFoundException());

			Cart cart = customer.getCart();

			List<CartItem> cartItems = cart.getCartItems();

			int quantity;
			double totalprice;
			quantity = cart.getTotalQuantity();
			totalprice = cart.getTotalPrice();
			for (CartItem cartItem : cartItems) {

				Product product = cartItem.getProduct();

				if (product.getProductId() == prodid) {
					quantity = quantity - 1;
					totalprice = totalprice - product.getProductPrice();
					cartItem.setQuantity(cartItem.getQuantity() - 1);
				}
			}
			cart.setTotalPrice(totalprice);
			cart.setTotalQuantity(quantity);
			cartRepository.save(cart);

			return "deleted Successfully";
		} catch (CustomerNotFoundException e) {
			System.out.println(e);
			return "Customer not Found";
		}

	}
}