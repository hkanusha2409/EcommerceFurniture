package com.ecommerce.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.ecommerce.dto.CustomerDTO;
import com.ecommerce.entity.Customer;
import com.ecommerce.exception.CustomerNotFoundException;
import com.ecommerce.serviceimplementation.CustomerServiceImpl;



@RestController
@RequestMapping("/customer")
@CrossOrigin(origins = "*") // Frontend Connection
public class CustomerController {

	@Autowired
	CustomerServiceImpl customerServiceImpl;

	@PostMapping("/register")
	public CustomerDTO addCustomer(@RequestBody Customer customer) {
		return customerServiceImpl.registerCustomer(customer);
	}

	@GetMapping("/all")
	public List<CustomerDTO> readAllCustomers() throws CustomerNotFoundException {
		return customerServiceImpl.readAllCustomers();
	}
	
	@PutMapping("/update/{id}")
	public String updateCustomer(@PathVariable(value = "id") int id, @RequestBody CustomerDTO user) {

		return customerServiceImpl.updateCustomer(id, user);
	}

	@DeleteMapping("/delete/{id}")
	public boolean deleteCustomer(@PathVariable(value = "id") int id) throws CustomerNotFoundException {
		customerServiceImpl.deleteCustomer(id);
		return true;
	}

	@GetMapping("/ByEmail/{email}")
	public List<CustomerDTO> getCustomerByEmail(@PathVariable(value = "email") String email) throws CustomerNotFoundException {
		return customerServiceImpl.getByEmail(email);
	}

	@GetMapping("/byId/{id}")
	public CustomerDTO getCustomerById(@PathVariable(value = "id") int id) throws CustomerNotFoundException {
		return customerServiceImpl.getCustomerById(id);
	}

	

}